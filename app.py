# app.py
# -*- coding: utf-8 -*-
"""
–≠–ï–® –ú–∞—Ç–µ–º–∞—Ç–∏–∫ ‚Äî –ë—ç–ª—Ç–≥—ç–ª –±–∞ –ñ–∏—à–∏–≥ —Ç–µ—Å—Ç (Streamlit)
- –ë—ç–ª—Ç–≥—ç–ª–∏–π–Ω –∞—Ä–≥–∞ –∑“Ø–π (—á–µ–∫–ª–∏—Å—Ç, –∑”©–≤–ª”©–≥”©”©)
- 4 —Ö—É–≤–∏–ª–±–∞—Ä √ó 40 –±–æ–¥–ª–æ–≥–æ (MCQ + —Ç–æ–æ–Ω —Ö–∞—Ä–∏—É)
- 100 –º–∏–Ω—É—Ç—ã–Ω —Ç–∞–π–º–µ—Ä, —è–≤—Ü—ã–Ω —Å–∞–º–±–∞—Ä
- –ê–≤—Ç–æ–º–∞—Ç “Ø–Ω—ç–ª–≥—ç—ç, —Å—ç–¥–≤–∏–π–Ω —Ç–∞–π–ª–∞–Ω, CSV/PDF —Ç–∞—Ç–∞—Ö
- CSV/JSON-–æ–æ—Ä –∞—Å—É—É–ª—Ç—ã–Ω —Å–∞–Ω –∏–º–ø–æ—Ä—Ç–ª–æ—Ö –±–æ–ª–æ–º–∂—Ç–æ–π, –∏–º–ø–æ—Ä—Ç —Ö–∏–π–≥–¥—ç—ç–≥“Ø–π –±–æ–ª –¥–µ–º–æ —Å–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä “Ø“Ø—Å–≥—ç–Ω—ç

–ê–∂–∏–ª–ª—É—É–ª–∞—Ö:
  1) pip install streamlit pandas numpy reportlab
  2) python -m streamlit run app.py

CSV/JSON —Ñ–æ—Ä–º–∞—Ç:
  variant,qnum,type,question,A,B,C,D,correct,score,solution,topic,difficulty,tolerance
  type: mcq | num ; correct: (A/B/C/D) —ç—Å–≤—ç–ª —Ç–æ–æ–Ω —É—Ç–≥–∞; tolerance: num-–¥ –∑”©–≤—à”©”©—Ä”©—Ö –∞–ª–¥–∞–∞

¬© 2025
"""

import io
import json
import math
import os
import random
from datetime import datetime, timedelta

import numpy as np
import pandas as pd
import streamlit as st
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import mm
from reportlab.platypus import Paragraph, SimpleDocTemplate, Spacer, Table, TableStyle
from reportlab.lib import colors

# ---------------------- CONFIG ----------------------
st.set_page_config(
    page_title="–≠–ï–® –ú–∞—Ç–µ–º–∞—Ç–∏–∫ ‚Äî –ë—ç–ª—Ç–≥—ç–ª –±–∞ –ñ–∏—à–∏–≥ —Ç–µ—Å—Ç",
    page_icon="üßÆ",
    layout="wide",
)

TOTAL_QUESTIONS = 40
TOTAL_VARIANTS = 4
EXAM_DURATION_MIN = 100

# ---------------------- STYLES ----------------------
st.markdown(
    """
    <style>
      .main > div {padding-top: 0.5rem;}
      .card {background:#fff;border-radius:16px;padding:16px;box-shadow:0 6px 24px rgba(0,0,0,.06)}
      .pill {display:inline-block;padding:2px 10px;border-radius:999px;background:#eef2ff;color:#3730a3;font-weight:600;font-size:12px;margin-right:6px}
      .timer {font-size:20px;font-weight:700;padding:6px 12px;border-radius:10px;background:#fef3c7;color:#92400e}
      .correct {color:#065f46;font-weight:700}
      .muted {color:#6b7280}
      .qhead {font-weight:700;color:#334155}
    </style>
    """,
    unsafe_allow_html=True,
)

# ---------------------- HELPERS ----------------------
@st.cache_data(show_spinner=False)
def generate_demo_bank(seed: int = 12) -> pd.DataFrame:
    random.seed(seed)
    np.random.seed(seed)
    rows = []
    topics = ["–ê–ª–≥–µ–±—Ä", "–§—É–Ω–∫—Ü/–ì—Ä–∞—Ñ–∏–∫", "–ì–µ–æ–º–µ—Ç—Ä", "–ú–∞–≥–∞–¥–ª–∞–ª/–°—Ç–∞—Ç–∏—Å—Ç–∏–∫"]
    for v in range(1, TOTAL_VARIANTS + 1):
        for q in range(1, TOTAL_QUESTIONS + 1):
            topic = topics[(q-1) % len(topics)]
            if q % 2 == 1:  # MCQ: —à—É–≥–∞–º–∞–Ω —Ç—ç–≥—à–∏—Ç–≥—ç–ª / “Ø–Ω–¥—Å—ç–Ω –ª–æ–≥–∏–∫
                a = random.randint(2, 9)
                b = random.randint(0, 9)
                x = random.randint(1, 9)
                c = a * x + b
                qtext = f"{a}x + {b} = {c}. x-–∏–π–Ω —É—Ç–≥–∞?"
                correct_val = x
                options_vals = [correct_val, correct_val+1, correct_val-1, correct_val+2]
                random.shuffle(options_vals)
                correct_letter = "ABCD"[options_vals.index(correct_val)]
                rows.append({
                    "variant": v, "qnum": q, "type": "mcq", "question": qtext,
                    "A": str(options_vals[0]), "B": str(options_vals[1]), "C": str(options_vals[2]), "D": str(options_vals[3]),
                    "correct": correct_letter, "score": 1,
                    "solution": f"{a}x = {c}-{b} ‚áí x={(c-b)//a}",
                    "topic": topic, "difficulty": ["Easy","Medium","Hard"][q%3], "tolerance": ""
                })
            else:  # NUMERIC: —Ç–æ–π—Ä–≥–∏–π–Ω —Ç–∞–ª–±–∞–π, –∏–ª—ç—Ä—Ö–∏–π–ª—ç–ª
                r = random.randint(2, 12)
                area = round(3.1416 * r * r, 2)
                qtext = f"–†–∞–¥–∏—É—Å {r} —Å–º —Ç–æ–π—Ä–≥–∏–π–Ω —Ç–∞–ª–±–∞–π–≥ œÄ=3.1416 –≥—ç–∂ —Ç–æ–æ—Ü–æ–æ–¥ –æ–ª–æ–æ—Ä–æ–π (—Å–º¬≤)."
                rows.append({
                    "variant": v, "qnum": q, "type": "num", "question": qtext,
                    "A": "", "B": "", "C": "", "D": "",
                    "correct": area, "score": 1,
                    "solution": f"S=œÄr¬≤=3.1416√ó{r}¬≤‚âà{area}",
                    "topic": topic, "difficulty": ["Easy","Medium","Hard"][q%3], "tolerance": round(0.05*area,2)
                })
    return pd.DataFrame(rows)


def load_bank_from_upload(upload) -> pd.DataFrame | None:
    if upload is None:
        return None
    name = upload.name.lower()
    try:
        if name.endswith('.csv'):
            df = pd.read_csv(upload)
        elif name.endswith('.json'):
            df = pd.read_json(upload)
        else:
            st.error('–ó”©–≤—Ö”©–Ω CSV/JSON –æ—Ä—É—É–ª–Ω–∞ —É—É.')
            return None
    except Exception as e:
        st.error(f"–§–∞–π–ª —É–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
        return None
    required = ["variant","qnum","type","question","correct","score"]
    miss = [c for c in required if c not in df.columns]
    if miss:
        st.error(f"–î—É—Ç—É—É –±–∞–≥–∞–Ω–∞: {', '.join(miss)}")
        return None
    df['variant'] = df['variant'].astype(int)
    df['qnum'] = df['qnum'].astype(int)
    return df


def check_numeric_answer(user_text: str, correct_value, tolerance=None) -> bool:
    try:
        if user_text is None or str(user_text).strip() == "":
            return False
        u = float(str(user_text).replace(',', '.'))
        c = float(correct_value)
        tol = float(tolerance) if tolerance not in (None, "", np.nan) else 0.0
        return abs(u - c) <= tol
    except Exception:
        return False


def grade_exam(bank: pd.DataFrame, answers: dict):
    details = []
    total = 0.0
    max_total = 0.0
    for _, row in bank.iterrows():
        key = (int(row.variant), int(row.qnum))
        ans = answers.get(key, None)
        ok = False
        if str(row.type).lower() == 'mcq':
            ok = (str(ans).upper() == str(row.correct).upper())
        else:
            ok = check_numeric_answer(ans, row.correct, row.get('tolerance', None))
        s = float(row.score) if ok else 0.0
        total += s
        max_total += float(row.score)
        details.append({
            'variant': int(row.variant), 'qnum': int(row.qnum), 'type': row.type,
            'topic': row.get('topic',''), 'difficulty': row.get('difficulty',''),
            'correct': row.correct, 'your': ans, 'is_correct': ok, 'score': s, 'max_score': float(row.score)
        })
    return total, max_total, pd.DataFrame(details)


def to_pdf_report(username: str, classroom: str, variant: int, summary: dict, detail_df: pd.DataFrame) -> bytes:
    buf = io.BytesIO()
    doc = SimpleDocTemplate(buf, pagesize=A4, leftMargin=18*mm, rightMargin=18*mm, topMargin=14*mm, bottomMargin=14*mm)
    styles = getSampleStyleSheet()
    elems = []
    elems.append(Paragraph(f"–≠–ï–® –ú–∞—Ç–µ–º–∞—Ç–∏–∫ ‚Äî –ñ–∏—à–∏–≥ —Ç–µ—Å—Ç —Ç–∞–π–ª–∞–Ω (–•—É–≤–∏–ª–±–∞—Ä {variant})", styles['Title']))
    meta = f"–°—É—Ä–∞–≥—á: <b>{username or '-'}</b> | –ê–Ω–≥–∏: <b>{classroom or '-'}</b> | –û–≥–Ω–æ–æ: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
    elems.append(Paragraph(meta, styles['Normal']))
    elems.append(Spacer(1, 8))
    score_line = f"–ù–∏–π—Ç –æ–Ω–æ–æ: <b>{summary['total']}</b> / {summary['max_total']}  (–ó”©–≤: {summary['correct_cnt']}, –ë—É—Ä—É—É: {summary['wrong_cnt']})"
    time_line = f"–ó–∞—Ä—Ü—É—É–ª–∞–≥–¥—Å–∞–Ω: {summary['spent_min']} –º–∏–Ω {summary['spent_sec']} —Å–µ–∫"
    elems.append(Paragraph(score_line, styles['Heading3']))
    elems.append(Paragraph(time_line, styles['Normal']))
    elems.append(Spacer(1, 6))
    # Topic breakdown
    tb = summary.get('topic_breakdown')
    if isinstance(tb, pd.DataFrame) and not tb.empty:
        data = [["–°—ç–¥—ç–≤", "–ó”©–≤", "–ù–∏–π—Ç", "–û–Ω–æ–æ"]] + tb.values.tolist()
        table = Table(data, colWidths=[70*mm, 20*mm, 20*mm, 20*mm])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0,0), (-1,0), colors.HexColor('#e2e8f0')),
            ('GRID', (0,0), (-1,-1), 0.25, colors.grey),
            ('ALIGN', (1,1), (-1,-1), 'CENTER'),
            ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ]))
        elems.append(Paragraph("–°—ç–¥–≤–∏–π–Ω —Ç–∞–π–ª–±–∞—Ä", styles['Heading3']))
        elems.append(table)
        elems.append(Spacer(1, 6))
    # Details
    header = ["#", "–¢”©—Ä”©–ª", "–ó”©–≤", "–¢–∞–Ω—ã", "–û–Ω–æ–æ"]
    rows = []
    for _, r in detail_df.sort_values('qnum').iterrows():
        rows.append([int(r.qnum), str(r.type).upper(), str(r.correct), str(r.your), f"{r.score}/{r.max_score}"])
    t2 = Table([header] + rows, colWidths=[12*mm, 18*mm, 28*mm, 28*mm, 20*mm])
    t2.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.HexColor('#f1f5f9')),
        ('GRID', (0,0), (-1,-1), 0.25, colors.grey),
        ('ALIGN', (0,0), (-1,-1), 'CENTER'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
    ]))
    elems.append(Paragraph("–ê—Å—É—É–ª—Ç—ã–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π", styles['Heading3']))
    elems.append(t2)
    doc.build(elems)
    pdf = buf.getvalue()
    buf.close()
    return pdf

# ---------------------- SIDEBAR ----------------------
st.sidebar.header("–¢–æ—Ö–∏—Ä–≥–æ–æ")
role = st.sidebar.selectbox("–≠—Ä—Ö", ["–°—É—Ä–∞–≥—á", "–ë–∞–≥—à/–ê–¥–º–∏–Ω"])
username = st.sidebar.text_input("–ù—ç—Ä/ID", value="student")
classroom = st.sidebar.text_input("–ê–Ω–≥–∏/–ë“Ø–ª—ç–≥", value="12A")

with st.sidebar.expander("–ê—Å—É—É–ª—Ç—ã–Ω —Å–∞–Ω –∏–º–ø–æ—Ä—Ç (CSV/JSON)"):
    up = st.file_uploader("–§–∞–π–ª –æ—Ä—É—É–ª–∞—Ö", type=["csv","json"], help="–î—ç—ç—Ä—Ö —Ñ–æ—Ä–º–∞—Ç—Ç–∞–π —Ñ–∞–π–ª—ã–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É.")
    bank_df = load_bank_from_upload(up)
    if bank_df is None:
        st.info("–ò–º–ø–æ—Ä—Ç —Ö–∏–π–≥–¥—ç—ç–≥“Ø–π —Ç—É–ª –¥–µ–º–æ —Å–∞–Ω “Ø“Ø—Å–≥—ç–ª—ç—ç (4√ó40).")
        bank_df = generate_demo_bank()

# ---------------------- SESSION ----------------------
ss = st.session_state
if 'started' not in ss: ss.started = False
if 'submitted' not in ss: ss.submitted = False
if 'start_time' not in ss: ss.start_time = None
if 'answers' not in ss: ss.answers = {}
if 'active_variant' not in ss: ss.active_variant = 1

# ---------------------- PREP GUIDE ----------------------
st.title("üßÆ –≠–ï–® –ú–∞—Ç–µ–º–∞—Ç–∏–∫ ‚Äî –ë—ç–ª—Ç–≥—ç–ª + –ñ–∏—à–∏–≥ —Ç–µ—Å—Ç")

with st.expander("–≠–ï–®-–∏–π–Ω –±—ç–ª—Ç–≥—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∏–π—Ö –∞—Ä–≥–∞ ‚Äî ", expanded=True):
    st.markdown(
        """
        **1. –°—ç–¥—ç–≤—á–∏–ª—Å—ç–Ω —Å—ç–¥–≤–∏–π–Ω –¥–∞–≥—É—É –¥–∞–≤—Ç–∞—Ö**: –ê–ª–≥–µ–±—Ä ‚Üí –§—É–Ω–∫—Ü/–ì—Ä–∞—Ñ–∏–∫ ‚Üí –ì–µ–æ–º–µ—Ç—Ä ‚Üí –ú–∞–≥–∞–¥–ª–∞–ª/–°—Ç–∞—Ç–∏—Å—Ç–∏–∫.
        
        **2. –¢–æ–º—å—ë–æ–Ω—ã –¥—ç–≤—Ç—ç—Ä—Ç—ç–π –±–∞–π—Ö**: –®–∏–Ω—ç —Ç–æ–º—å—ë–æ–≥ —Ç–æ–º—å—ë–æ–Ω—ã –¥—ç–≤—Ç—ç—Ä –¥—ç—ç—Ä—ç—ç –±–∏—á–∏—Ö, ”©–¥”©—Ä –±“Ø—Ä 10‚Äì15 –º–∏–Ω—É—Ç —Ç–æ–º—å—ë–æ–Ω—É—É–¥–∞–∞ —ç—Ä–≥—ç–∂ —Ö–∞—Ä–∂ –±–∞–π—Ö.
        
        **3. ”®–≥”©–≥–¥”©–ª—Ç—ç–π –∞–∂–∏–ª–ª–∞—Ö –¥–∞–¥–ª–∞–≥–∞**: –≥—Ä–∞—Ñ–∏–∫ —Ç–∞–π–ª–±–∞—Ä–ª–∞—Ö, —Ö“Ø—Å–Ω—ç–≥—Ç —É–Ω—à–∏—Ö, –Ω—ç–≥–∂ —Ö—É–≤–∏—Ä–≥–∞—Ö.
        
        **4. –¶–∞–≥–∏–π–Ω –º–µ–Ω–µ–∂–º–µ–Ω—Ç**: 100 –º–∏–Ω—É—Ç = 40 –±–æ–¥–ª–æ–≥–æ ‚Üí –¥—É–Ω–¥–∂–∞–∞—Ä 1 –±–æ–¥–ª–æ–≥–æ 2‚Äì2.5 –º–∏–Ω.
        
        **5. –ê–ª–¥–∞–∞-—Ç–∞–π–ª–∞–Ω**: –±—É—Ä—É—É –±–æ–¥—Å–æ–Ω –±–æ–¥–ª–æ–≥—É—É–¥—ã–≥ —Ç”©—Ä”©–ª, —à–∞–ª—Ç–≥–∞–∞–Ω–∞–∞—Ä —Ç—ç–º–¥—ç–≥–ª—ç–∂ –¥–æ–ª–æ–æ —Ö–æ–Ω–æ–≥ –±“Ø—Ä —ç—Ä–≥—ç–∂ —Ö–∞—Ä–∞—Ö.
        
        **6. –ñ–∏—à–∏–≥ —Ç–µ—Å—Ç**: –ñ–∏—à–∏–≥ —Ç–µ—Å—Ç–∏–π–≥ 2‚Äì3 —É–¥–∞–∞ —Ö–∏–π–∂ “Ø–∑—ç—Ö (—Ç–∞–π–º–µ—Ä—Ç–∞–π).
        """
    )

# ---------------------- VARIANT PICKER ----------------------
colA, colB, colC, colD = st.columns([2,1,1,2])
with colA:
    v = st.selectbox("–•—É–≤–∏–ª–±–∞—Ä —Å–æ–Ω–≥–æ—Ö", sorted(bank_df['variant'].unique().tolist()), index=0)
with colB:
    st.metric("–ù–∏–π—Ç –∞—Å—É—É–ª—Ç", TOTAL_QUESTIONS)
with colC:
    st.metric("–ù–∏–π—Ç —Ö—É–≤–∏–ª–±–∞—Ä", TOTAL_VARIANTS)
with colD:
    pass

variant_df = bank_df[bank_df['variant'] == v].sort_values('qnum').reset_index(drop=True)
if len(variant_df) < TOTAL_QUESTIONS:
    st.warning(f"–•—É–≤–∏–ª–±–∞—Ä {v} –¥—ç—ç—Ä {len(variant_df)} –∞—Å—É—É–ª—Ç –±–∞–π–Ω–∞. {TOTAL_QUESTIONS} –±–∞–π—Ö —ë—Å—Ç–æ–π.")

# ---------------------- CONTROLS (Start/Save/Submit) ----------------------
ctrl = st.container()
with ctrl:
    c1, c2, c3, c4 = st.columns([1.5,1,1,2])
    with c1:
        if (not ss.started) or ss.active_variant != v:
            if st.button("‚ñ∂Ô∏è –≠—Ö–ª“Ø“Ø–ª—ç—Ö/–î–∞—Ö–∏–Ω —ç—Ö–ª“Ø“Ø–ª—ç—Ö", use_container_width=True):
                ss.started = True
                ss.active_variant = v
                ss.start_time = datetime.now()
                ss.submitted = False
                ss.answers = {}
                st.rerun()
        else:
            st.success(f"–•—É–≤–∏–ª–±–∞—Ä {v} –∏–¥—ç–≤—Ö—Ç—ç–π")
    with c2:
        if ss.started and not ss.submitted:
            if st.button("üíæ –¢“Ø—Ä —Ö–∞–¥–≥–∞–ª–∞—Ö", use_container_width=True):
                st.toast("–•–∞–¥–≥–∞–ª–ª–∞–∞ (session)")
    with c3:
        if ss.started and not ss.submitted:
            if st.button("üõë –î—É—É—Å–≥–∞—Ö/–ò–ª–≥—ç—ç—Ö", use_container_width=True):
                ss.submitted = True
                st.rerun()
    with c4:
        if ss.started:
            elapsed = datetime.now() - ss.start_time
            remain = max(timedelta(minutes=EXAM_DURATION_MIN) - elapsed, timedelta(seconds=0))
            mins = int(remain.total_seconds() // 60)
            secs = int(remain.total_seconds() % 60)
            st.markdown(f"<span class='timer'>‚è± “Æ–ª–¥—Å—ç–Ω —Ö—É–≥–∞—Ü–∞–∞: {mins:02d}:{secs:02d}</span>", unsafe_allow_html=True)
            if remain.total_seconds() <= 0 and not ss.submitted:
                st.warning("–•—É–≥–∞—Ü–∞–∞ –¥—É—É—Å–ª–∞–∞. –ê–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –∏–ª–≥—ç—ç–≤.")
                ss.submitted = True
                st.rerun()

# ---------------------- QUESTION RENDER ----------------------

def render_question(row):
    q_key = (int(row.variant), int(row.qnum))
    st.markdown(f"<div class='qhead'>–ê—Å—É—É–ª—Ç #{int(row.qnum)}</div>", unsafe_allow_html=True)
    st.write(row.question)

    disabled = (not ss.started) or ss.submitted or (ss.active_variant != v)
    prev = ss.answers.get(q_key)

    if str(row.type).lower() == 'mcq':
        opt_keys = ["A","B","C","D"]
        # –∑”©–≤—Ö”©–Ω –±–∞–π–≥–∞–∞ —Å–æ–Ω–≥–æ–ª—Ç—É—É–¥—ã–≥ –¥“Ø“Ø—Ä–≥—ç–Ω—ç
        options = [k for k in opt_keys if k in row.index and pd.notna(row[k])]
        labels = []
        for k in options:
            label = row[k]
            label = "" if (isinstance(label, float) and math.isnan(label)) else str(label)
            labels.append(f"{k}. {label}")
        if not options:
            st.warning("–≠–Ω—ç –∞—Å—É—É–ª—Ç–∞–¥ —Å–æ–Ω–≥–æ–ª—Ç –∞–ª–≥–∞")
            st.divider()
            return
        # index-–≥ –∞—é—É–ª–≥“Ø–π —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö
        if prev in options:
            sel_index = options.index(prev)
        else:
            sel_index = 0
        choice = st.radio(
            label="–°–æ–Ω–≥–æ–ª—Ç",
            options=options,
            index=sel_index,
            key=f"q_{q_key}",
            horizontal=True,
            disabled=disabled,
            captions=labels,
        )
        if not disabled:
            ss.answers[q_key] = choice
    else:
        val = st.text_input("–•–∞—Ä–∏—É (—Ç–æ–æ)", value=str(prev) if prev not in (None, 'None') else "", key=f"q_{q_key}", disabled=disabled)
        if not disabled:
            ss.answers[q_key] = val

    with st.expander("–¢–∞–π–ª–±–∞—Ä/–®–∏–π–¥ (–∏–ª–≥—ç—ç—Å—ç–Ω–∏–π –¥–∞—Ä–∞–∞)"):
        if ss.submitted:
            if str(row.type).lower() == 'mcq':
                st.markdown(f"–ó”©–≤ —Ö–∞—Ä–∏—É–ª—Ç: <span class='correct'>{row.correct}</span>", unsafe_allow_html=True)
            else:
                tol = row.get('tolerance', '')
                tol_txt = f" (¬±{tol})" if tol not in (None, "", np.nan) else ""
                st.markdown(f"–ó”©–≤ —Ö–∞—Ä–∏—É–ª—Ç: <span class='correct'>{row.correct}{tol_txt}</span>", unsafe_allow_html=True)
            st.write(row.get('solution',''))
        else:
            st.markdown("<span class='muted'>–ò–ª–≥—ç—ç—Å–Ω–∏–π –¥–∞—Ä–∞–∞ —Ö–∞—Ä–∞–≥–¥–∞–Ω–∞</span>", unsafe_allow_html=True)
    st.divider()

left, right = st.columns([3,1])
with left:
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    if ss.started:
        for _, row in variant_df.iterrows():
            render_question(row)
    else:
        st.info("–•—É–≤–∏–ª–±–∞—Ä —Å–æ–Ω–≥–æ–æ–¥ '–≠—Ö–ª“Ø“Ø–ª—ç—Ö' –¥–∞—Ä–Ω–∞ —É—É.")
    st.markdown("</div>", unsafe_allow_html=True)
with right:
    st.subheader("–Ø–≤—Ü")
    if ss.started:
        answered = sum(1 for (vk,qk), val in ss.answers.items() if vk==ss.active_variant and (val not in (None, "")))
        st.progress(answered / max(1, len(variant_df)))
        st.write(f"–•–∞—Ä–∏—É–ª—Å–∞–Ω: {answered} / {len(variant_df)})")
        st.caption("–®—É—É—Ä—Ö–∞–π –Ω–∞–≤–∏–≥–∞—Ü–∏")
        cols = st.columns(5)
        for i, (_, row) in enumerate(variant_df.iterrows()):
            key = (int(row.variant), int(row.qnum))
            filled = (key in ss.answers) and (ss.answers[key] not in (None, ""))
            cols[i%5].button(f"{int(row.qnum)}", type=("primary" if filled else "secondary"))

# ---------------------- RESULTS ----------------------
if ss.submitted and ss.started:
    total, max_total, detail_df = grade_exam(variant_df, ss.answers)
    correct_cnt = int(detail_df['is_correct'].sum())
    wrong_cnt = len(detail_df) - correct_cnt
    percent = 0 if max_total == 0 else round(100*total/max_total,1)

    st.success(f"–î“Ø–Ω: {total} / {max_total}  ({percent}%) ‚Ä¢ –ó”©–≤: {correct_cnt} ‚Ä¢ –ë—É—Ä—É—É: {wrong_cnt}")

    # Topic breakdown
    if 'topic' in variant_df.columns:
        topic_grp = detail_df.groupby('topic', dropna=False).agg(
            –ó”©–≤=("is_correct","sum"), –ù–∏–π—Ç=("is_correct","count"), –û–Ω–æ–æ=("score","sum")
        ).reset_index().rename(columns={"topic":"–°—ç–¥—ç–≤"})
    else:
        topic_grp = pd.DataFrame()

    with st.expander("–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —Ö“Ø—Å–Ω—ç–≥—Ç"):
        st.dataframe(detail_df.drop(columns=['variant']).sort_values('qnum'), use_container_width=True)

    # CSV download
    result_df = detail_df.copy()
    result_df.insert(0, 'username', username)
    result_df.insert(1, 'classroom', classroom)
    result_df.insert(2, 'timestamp', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    csv_bytes = result_df.to_csv(index=False).encode('utf-8-sig')
    st.download_button("CSV —Ç–∞—Ç–∞—Ö", data=csv_bytes, file_name=f"result_variant{v}.csv", mime="text/csv")

    # PDF download
    summary = {
        'total': total, 'max_total': max_total,
        'correct_cnt': correct_cnt, 'wrong_cnt': wrong_cnt,
        'spent_min': int((datetime.now()-ss.start_time).total_seconds()//60),
        'spent_sec': int((datetime.now()-ss.start_time).total_seconds()%60),
        'topic_breakdown': topic_grp if not topic_grp.empty else pd.DataFrame(),
    }
    pdf_bytes = to_pdf_report(username, classroom, v, summary, detail_df)
    st.download_button("PDF —Ç–∞–π–ª–∞–Ω —Ç–∞—Ç–∞—Ö", data=pdf_bytes, file_name=f"report_variant{v}.pdf", mime="application/pdf")

# ---------------------- TEACHER PANEL ----------------------
if role == "–ë–∞–≥—à/–ê–¥–º–∏–Ω":
    st.divider()
    st.subheader("–ë–∞–≥—à/–ê–¥–º–∏–Ω —Å–∞–º–±–∞—Ä")
    st.caption("–ò–º–ø–æ—Ä—Ç–æ–ª—Å–æ–Ω/–¥–µ–º–æ —Å–∞–Ω–≥–∏–π–Ω —ç—Ö–Ω–∏–π –º”©—Ä“Ø“Ø–¥")
    st.dataframe(bank_df.head(20), use_container_width=True)
    st.caption("–§–æ—Ä–º–∞—Ç: variant,qnum,type,question,A,B,C,D,correct,score,solution,topic,difficulty,tolerance")
    st.download_button("–ñ–∏—à—ç—ç CSV —Ç–∞—Ç–∞—Ö (–æ–¥–æ–æ–≥–∏–π–Ω —Å–∞–Ω–≥–∞–∞—Å)", data=bank_df.to_csv(index=False).encode('utf-8-sig'), file_name='sample_bank.csv', mime='text/csv')

st.caption("¬© 2025 ‚Ä¢ Streamlit")
